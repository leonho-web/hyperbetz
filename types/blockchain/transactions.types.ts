/**
 * Defines the possible states of a transaction as it moves through its lifecycle.
 */
export enum TransactionStatus {
	PENDING = "pending", // Transaction has been initiated by the user, awaiting confirmation.
	CONFIRMED = "confirmed", // Transaction is successful and confirmed on the blockchain.
	SUBMITTED = "submitted", // A special status for swaps, indicating it's sent but not yet final.
	FAILED = "failed", // Transaction has failed, been rejected, or timed out.
}

/**
 * Defines the types of transactions the system can track.
 */
export enum TransactionType {
	DEPOSIT = "deposit",
	WITHDRAW = "withdraw",
	SWAP = "swap",
	TIP = "tip",
}

/**
 * The specific data payload for an auto-deposit/withdrawal status update.
 */
export interface AutoDepoWdStatusPayload {
	status: "enabled" | "disabled";
	reason?: string;
}

/**
 * A discriminated union of all possible incoming WebSocket messages.
 * This allows for exhaustive type checking in our message handler.
 */
export type WebSocketMessage =
	| { type: "DEPOSITNOTIFICATION"; data: TransactionNotificationData }
	| { type: "WITHDRAWNOTIFICATION"; data: TransactionNotificationData }
	| { type: "AUTODEPOWDSTATUSNOTIFICATION"; data: AutoDepoWdStatusPayload };

/**
 * Represents the structure of the data object received from a WebSocket notification
 * for a deposit or withdrawal event.
 */
export interface TransactionNotificationData {
	txId: string;
	amount: number;
	currency: string;
	status: "CONFIRMED" | "REJECTED"; // The status from the backend
}

/**
 * Represents a single transaction object as it is stored and managed
 * within our application's state (e.g., in the Zustand store).
 */
export interface AppTransaction {
	/** A unique ID generated by the client for React keys (e.g., Date.now()). */
	id: number;
	/** The on-chain transaction hash (e.g., "0x..."). */
	hash?: string;
	/** The type of the transaction. */
	type: TransactionType;
	/** The current status of the transaction within our app. */
	status: TransactionStatus;
	/** The amount of the transaction. */
	amount: number | string;
	/** The symbol of the token involved (e.g., "USDT"). */
	tokenSymbol: string;
	/** The network name or chain ID where the transaction occurred. */
	network: string | number;
	/** The client-side timestamp of when the transaction was initiated. */
	timestamp: number;

	// --- Optional fields for specific transaction types ---
	fromToken?: string; // For swaps
	toToken?: string; // For swaps

	// --- Internal properties for state management ---
	error?: string | null; // To store any failure reasons
	timeoutId?: NodeJS.Timeout | null; // To manage failsafe timeouts
	serverTxId?: string; // To store the txId from the WebSocket for reference
}
